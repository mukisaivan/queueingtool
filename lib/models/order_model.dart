// ignore_for_file: public_member_api_docs, sort_constructors_first, constant_identifier_names

import 'dart:convert';
import 'package:queueingtool/models/user.dart';

enum StatusEnum {
  Waiting,
  Pending,
  Completed,
  Canceled,
}

enum ServiceEnum {
  Payfees,
  Deposit,
  Withdraw,
}

class OrderModel {
  static int orderCounter = 1;

  final String name;
  final String id;
  final StatusEnum status;
  final DateTime createdAt;
  final DateTime updatedAt;
  final UserModel orderowner;
  final ServiceEnum service;
  final bool inProgress;
  OrderModel({
    required this.name,
    required this.id,
    required this.status,
    required this.createdAt,
    required this.updatedAt,
    required this.orderowner,
    required this.service,
    required this.inProgress,
  });

  Map<String, dynamic> toMap() {
    return <String, dynamic>{
      'name': name,
      'id': id,
      'status': status.toString().split(".").last,
      'createdAt': createdAt.millisecondsSinceEpoch,
      'updatedAt': updatedAt.millisecondsSinceEpoch,
      'orderowner': orderowner.toJson(),
      'service': service.toString().split(".").last,
      'inProgress': inProgress,
    };
  }

  factory OrderModel.fromMap(Map<String, dynamic> map) {
    return OrderModel(
      name: map['name'] as String,
      id: map['id'] as String,
      status: convertStatusStringToStatusEnum(map["status"] as String),
      createdAt: DateTime.fromMillisecondsSinceEpoch(map['createdAt'] as int),
      updatedAt: DateTime.fromMillisecondsSinceEpoch(map['updatedAt'] as int),
      orderowner: UserModel.fromMap(map['orderowner'] as Map<String, dynamic>),
      service: convertServiceStringToServiceEnum(map["service"] as String),
      inProgress: map['inProgress'] as bool,
    );
  }

  factory OrderModel.autoGenerated({
    required String id,
    required StatusEnum status,
    required UserModel orderOwner,
    required ServiceEnum service,
  }) {
    String orderName = 'Order-${orderCounter++}';
    // String orderId = const Uuid().v4();

    return OrderModel(
      name: orderName,
      id: id,
      status: status,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      orderowner: orderOwner,
      service: service,
      inProgress: false,
    );
  }

  static int premiumOrderCount = 1;

  factory OrderModel.premiumAutoGenerated({
    required String id,
    required StatusEnum status,
    required UserModel orderowner,
  }) {
    String orderName = " Premium Order Number: ${premiumOrderCount++}";
    return OrderModel(
      name: orderName,
      id: id,
      status: StatusEnum.Pending,
      createdAt: DateTime.now(),
      updatedAt: DateTime.now(),
      orderowner: orderowner,
      service: ServiceEnum.Deposit,
      inProgress: true,
    );
  }

  String toJson() => json.encode(toMap());

  factory OrderModel.fromJson(String source) =>
      OrderModel.fromMap(json.decode(source) as Map<String, dynamic>);

  static StatusEnum convertStatusStringToStatusEnum(String status) {
    switch (status) {
      case "Waiting":
        return StatusEnum.Waiting;
      case "Pending":
        return StatusEnum.Pending;
      case "Completed":
        return StatusEnum.Completed;
      case "Canceled":
        return StatusEnum.Canceled;
      default:
    }
    return StatusEnum.Pending;
  }

  static ServiceEnum convertServiceStringToServiceEnum(String service) {
    switch (service) {
      case "Withdraw":
        return ServiceEnum.Withdraw;
      case "Deposit":
        return ServiceEnum.Deposit;
      case "Payfees":
        return ServiceEnum.Payfees;

      default:
    }
    return ServiceEnum.Deposit;
  }
}
