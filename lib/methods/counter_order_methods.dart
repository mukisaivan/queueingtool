import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:flutter_spinkit/flutter_spinkit.dart';
import 'package:queueingtool/common/loading.dart';
import 'package:queueingtool/common/toast_widget.dart';
import 'package:queueingtool/models/order_model.dart';
import 'package:queueingtool/models/user.dart';
import 'package:uuid/uuid.dart';

class CounterOrderMethods {
  final currentUser = FirebaseAuth.instance.currentUser;

  // Get the user's document from Firestore

  addOrder() async {
    DocumentSnapshot userSnapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseAuth.instance.currentUser!.uid)
        .get();

    UserModel orderOwner = await UserModel.fromSnap(userSnapshot);

    String orderId = const Uuid().v4();

    var order = OrderModel.autoGenerated(
      id: orderId,
      status: StatusEnum.Waiting,
      orderOwner: orderOwner,
      service: ServiceEnum.Deposit,
    );

    var orders = FirebaseFirestore.instance.collection("Orders");
    await orders.doc(orderId).set(order.toMap());
  }

  fetchOrders() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('Orders')
          .orderBy('createdAt', descending: false)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Loading();
        }

        List<OrderModel> orders =
            snapshot.data!.docs.map((DocumentSnapshot document) {
          Map<String, dynamic> data = document.data() as Map<String, dynamic>;
          return OrderModel.fromMap(data);
        }).toList();

        return ListView.builder(
          itemCount: orders.length,
          itemBuilder: (context, index) {
            return buildOrderCard(orders[index], index);
          },
        );
      },
    );
  }

  Widget buildOrderCard(OrderModel order, int index) {
    // OrderStatus orderStatus = OrderStatus.Waiting;

    String orderStatusToString(StatusEnum status) {
      switch (status.name) {
        case "Waiting":
          return 'Waiting';
        case "Pending":
          return 'Pending';
        case "Completed":
          return 'Completed';
      }
      return "Status Not Recognised";
    }

    Color colorchanger(StatusEnum status) {
      switch (status.name) {
        case "Waiting":
          return const Color.fromARGB(255, 9, 218, 255);
        case "Pending":
          return const Color.fromARGB(255, 246, 254, 0);
        case "Completed":
          return const Color.fromARGB(255, 0, 255, 8);
      }
      return const Color.fromARGB(255, 88, 86, 65);
    }

    void updateOrderStatus(OrderModel order, StatusEnum newStatus) async {
      try {
        await FirebaseFirestore.instance
            .collection("Orders")
            .doc(order.id)
            .update({
          'status': newStatus.toString().split(".").last,
          'updatedAt': DateTime.now().millisecondsSinceEpoch,
        });
      } catch (e) {
        print('Error updating order status: $e');
        // Handle the error appropriately
      }
    }

    String orderService = order.service.toString().split(".").last;

    return Card(
      elevation: 30,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(20)),
      color: colorchanger(order.status),
      margin: const EdgeInsets.all(8.0),
      child: Padding(
        padding:
            const EdgeInsets.only(top: 16, bottom: 16, right: 20, left: 20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Column(
                  children: [
                    const SizedBox(height: 8.0),
                    Text(
                      "Order  ${index + 1}",
                      style: const TextStyle(
                          fontSize: 25, fontWeight: FontWeight.bold),
                    ),
                    // Text(
                    //   '#${order.name}',
                    //   style: const TextStyle(
                    //       fontSize: 25, fontWeight: FontWeight.bold),
                    // ),
                    Text(
                      'Ordered by : ${order.orderowner.username}',
                      style: const TextStyle(
                          fontSize: 15, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8.0),
                    Text(
                      'Service Needed: $orderService',
                      style: const TextStyle(fontSize: 16),
                    ), // Modify this to show actual order items
                    const SizedBox(height: 8.0),
                    Text('Status: ${orderStatusToString(order.status)}'),
                    const SizedBox(height: 16.0),
                  ],
                ),
                const SizedBox(width: 50),
                order.status == StatusEnum.Pending
                    ? const Column(
                        children: [
                          SpinKitWave(
                            color: Color.fromARGB(255, 191, 0, 255),
                          ),
                        ],
                      )
                    : const SizedBox()
              ],
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceAround,
              children: [
                order.status != StatusEnum.Pending
                    ? ElevatedButton(
                        onPressed: () {
                          updateOrderStatus(order, StatusEnum.Waiting);
                        },
                        child: const Text('Waiting'),
                      )
                    : const SizedBox(),
                order.status != StatusEnum.Pending
                    ? ElevatedButton(
                        onPressed: () {
                          updateOrderStatus(order, StatusEnum.Pending);
                        },
                        child: const Text('Pending'),
                      )
                    : const SizedBox(),
                ElevatedButton(
                  onPressed: () {
                    updateOrderStatus(order, StatusEnum.Completed);
                    deleteOrder(order);
                    toastWidget("Order Completed",
                        const Color.fromARGB(255, 0, 255, 8));
                  },
                  child: const Text('Completed'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  void deleteOrder(OrderModel order) async {
    try {
      await FirebaseFirestore.instance
          .collection("Orders")
          .doc(order.id)
          .delete();

      toastWidget("Order Satified üòÅ", Colors.green);
    } catch (e) {
      print('Error deleting order: $e');
      // Handle the error appropriately
    }
  }
}
