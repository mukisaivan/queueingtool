// ignore_for_file: use_build_context_synchronously

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import 'package:queueingtool/common/loading.dart';
import 'package:queueingtool/common/toast_widget.dart';
import 'package:queueingtool/models/order_model.dart';
import 'package:queueingtool/models/user.dart';
import 'package:queueingtool/screens/customer_screen.dart';
import 'package:uuid/uuid.dart';

class CustomerOrderMethods {
  final currentUser = FirebaseAuth.instance.currentUser;

  // Get the user's document from Firestore

  addOrder(BuildContext context, ServiceEnum? serviceEnum) async {
    DocumentSnapshot userSnapshot = await FirebaseFirestore.instance
        .collection('users')
        .doc(FirebaseAuth.instance.currentUser!.uid)
        .get();

    UserModel orderOwner = await UserModel.fromSnap(userSnapshot);

    String orderId = const Uuid().v4();

    var order = OrderModel.autoGenerated(
      id: orderId,
      status: StatusEnum.Waiting,
      orderOwner: orderOwner,
      service: serviceEnum ?? ServiceEnum.Deposit,
    );

    var orders = FirebaseFirestore.instance.collection("Orders");
    await orders.doc(orderId).set(order.toMap());
    toastWidget(
      "Order Made Successfully âœ…",
      const Color.fromARGB(255, 255, 101, 250),
    );
    Navigator.pushNamed(context, CustomerScreen.routeName);
  }

  fetchOrders() {
    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('Orders')
          .orderBy('createdAt', descending: false)
          .snapshots(),
      builder: (context, snapshot) {
        if (!snapshot.hasData) {
          return const Loading();
        }

        List<OrderModel> orders =
            snapshot.data!.docs.map((DocumentSnapshot document) {
          Map<String, dynamic> data = document.data() as Map<String, dynamic>;
          return OrderModel.fromMap(data);
        }).toList();

        return ListView.builder(
          itemCount: orders.length,
          itemBuilder: (context, index) {
            return buildOrderCard(orders[index]);
          },
        );
      },
    );
  }

  Widget buildOrderCard(OrderModel order) {
    // OrderStatus orderStatus = OrderStatus.Waiting;

    String orderStatusToString(StatusEnum status) {
      switch (status.name) {
        case "Waiting":
          return 'Waiting';
        case "Pending":
          return 'Pending';
        case "Completed":
          return 'Completed';
      }
      return "Status Not Recognised";
    }

    Color colorchanger(StatusEnum status) {
      switch (status.name) {
        case "Waiting":
          return const Color.fromARGB(255, 9, 218, 255);
        case "Pending":
          return const Color.fromARGB(255, 246, 254, 0);
        case "Completed":
          return const Color.fromARGB(255, 0, 255, 8);
      }
      return const Color.fromARGB(255, 88, 86, 65);
    }

    String orderService = order.service.toString().split(".").last;

    return Card(
      color: isCurrentUserOwner(FirebaseAuth.instance.currentUser!, order)
          ? const Color.fromARGB(255, 255, 101, 152)
          : colorchanger(order.status),
      margin: const EdgeInsets.all(8.0),
      child: Padding(
        padding: const EdgeInsets.only(top: 16, bottom: 16, right: 5, left: 5),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Column(
                  children: [
                    Text(
                      '#${order.id}',
                      style: const TextStyle(
                          fontSize: 10, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8.0),

                    isCurrentUserOwner(
                            FirebaseAuth.instance.currentUser!, order)
                        ? const Text(
                            "Y O U R   O R D E R",
                            style: TextStyle(fontSize: 20),
                          )
                        : Text(
                            '#${order.name}',
                            style: const TextStyle(
                                fontSize: 8, fontWeight: FontWeight.bold),
                          ),
                    isCurrentUserOwner(
                            FirebaseAuth.instance.currentUser!, order)
                        ? Text(
                            '#${order.name}',
                            style: const TextStyle(
                                fontSize: 10, fontWeight: FontWeight.bold),
                          )
                        : const SizedBox(),
                    Text(
                      'Ordered by : ${order.orderowner.username}',
                      style: const TextStyle(
                          fontSize: 15, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8.0),
                    Text(
                        'Service Needed: $orderService'), // Modify this to show actual order items
                    const SizedBox(height: 8.0),
                    Text(
                      'Status: ${orderStatusToString(order.status)}',
                      style: const TextStyle(
                        fontSize: 10,
                      ),
                    ),
                    const SizedBox(height: 16.0),
                  ],
                ),
                order.status == StatusEnum.Pending
                    ? const Column(
                        children: [CircularProgressIndicator()],
                      )
                    : const SizedBox()
              ],
            ),
          ],
        ),
      ),
    );
  }

  void deleteOrder(OrderModel order) async {
    try {
      await FirebaseFirestore.instance
          .collection("Orders")
          .doc(order.id)
          .delete();
    } catch (e) {
      print('Error deleting order: $e');
      // Handle the error appropriately
    }
  }

  bool isCurrentUserOwner(User currentUser, OrderModel ordermodel) {
    var orderOwner = ordermodel.orderowner;

    return orderOwner.uid == currentUser.uid;
  }
}
